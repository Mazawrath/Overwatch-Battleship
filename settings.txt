settings
{
	lobby
	{
		Max FFA Players: 2
		Max Spectators: 6
	}

	modes
	{
		Deathmatch
		{
			enabled maps
			{
				Workshop Island Night
			}
		}

		General
		{
			Game Mode Start: Immediately
			Limit Roles: 2 Of Each Role Per Team
		}
	}
}

variables
{
	global:
		0: GamePhase
		1: Grid
		2: ShipNames
		3: ShipLengths
		4: Itt1
		5: Itt2

	player:
		1: NearestGrid
		2: ShowShips
		3: PlayerHero
		9: ShipLocations
		10: CurrentShipPlacing
		11: LastShipPinPlaced
}

subroutines
{
	0: CheckValidShipPlacement
}

rule("Remove assemble heroes time")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Is Assembling Heroes == True;
	}

	actions
	{
		Disable Built-In Game Mode Announcer;
		Disable Built-In Game Mode Music;
		Disable Built-In Game Mode Completion;
		Set Match Time(0);
		Wait(0.250, Ignore Condition);
		Pause Match Time;
		Set Match Time(0);
	}
}

rule("Global Initialization")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		disabled Is Game In Progress == True;
		disabled Is Assembling Heroes == False;
	}

	actions
	{
		Global.Grid = Empty Array;
		"Create a grid to figure out where the player is"
		For Global Variable(Itt1, 0, 40, 4);
			For Global Variable(Itt2, 0, 40, 4);
				Modify Global Variable(Grid, Append To Array, Vector(Global.Itt1 - 18, 0, Global.Itt2 - 18));
			End;
		End;
		Global.ShipNames = Array(Custom String("Aircraft Carrier"), Custom String("Battleship"), Custom String("Cruiser"), Custom String(
			"Submarine"), Custom String("Destroyer"));
		Global.ShipLengths = Array(5, 4, 3, 3, 2);
	}
}

rule("Player Initialization")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	actions
	{
		Set Status(Event Player, Null, Invincible, 9999);
		Set Status(Event Player, Null, Phased Out, 9999);
		Event Player.ShipLocations = Empty Array;
		"Create a grid for the player ships"
		For Global Variable(Itt1, 0, 40, 4);
			For Global Variable(Itt2, 0, 40, 4);
				Modify Player Variable(Event Player, ShipLocations, Append To Array, 0);
			End;
		End;
		Event Player.ShowShips = True;
		Event Player.LastShipPinPlaced = -1;
	}
}

rule("Global Hud")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Game In Progress == True;
	}

	actions
	{
		Create HUD Text(All Players(All Teams), Null, Custom String("Battleship Beta v0.0.1. Developed by u/Mazawrath."), Null, Left, 0,
			White, Sky Blue, White, None, Visible Always);
		Create HUD Text(All Players(All Teams), Null, Null, Custom String("Ships:"), Right, 0, White, White, White, Visible To and String,
			Visible Always);
		"Display each ship and its length"
		For Global Variable(Itt1, -1, Count Of(Global.ShipNames) - 1, 1);
			Create HUD Text(All Players(All Teams), Null, Null, Custom String("{0} ({1} long)", Global.ShipNames[Global.Itt1],
				Global.ShipLengths[Global.Itt1], Global.Itt1), Right, Global.Itt1 + 1, White, White, Orange, None, Visible Always);
		End;
	}
}

rule("Player HUD")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	actions
	{
		Create HUD Text(All Players(All Teams), Custom String("Closest Grid: {0}", Index Of Array Value(Global.Grid,
			Event Player.NearestGrid)), Null, Null, Left, 0, White, White, White, Visible To and String, Default Visibility);
		Create HUD Text(Filtered Array(All Players(All Teams), Global.GamePhase == 1), Custom String("Place your: {0}",
			Global.ShipNames[Event Player.CurrentShipPlacing]), Null, Null, Left, 0, White, White, White, Visible To and String,
			Visible Never);
	}
}

rule("Track which grid player is in")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	actions
	{
		Event Player.NearestGrid = First Of(Sorted Array(Global.Grid, Distance Between(Position Of(Event Player), Current Array Element)));
		Wait(0.250, Ignore Condition);
		Loop;
	}
}

rule("Place a ship (temporary)")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Button Held(Event Player, Crouch) == True;
		disabled Global.GamePhase == 1;
	}

	actions
	{
		"Check if there is a ship already there"
		If(Event Player.ShipLocations[Index Of Array Value(Global.Grid, Event Player.NearestGrid)] == 0);
			If(Event Player.LastShipPinPlaced == -1);
				"Create ship for player"
				Create Effect(Filtered Array(Event Player, Event Player.ShowShips), Sphere, Sky Blue, Event Player.NearestGrid, 1, Visible To);
				"When a player places a ship, place a number in their ShipLocations to symbolize it"
				Event Player.ShipLocations[Index Of Array Value(Global.Grid, Event Player.NearestGrid)] = 1;
			Else;
				Call Subroutine(CheckValidShipPlacement);
			End;
		Else;
			Big Message(All Players(All Teams), Custom String("You have already placed a ship here!"));
		End;
		End;
	}
}

rule("Toggle ship visibility")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Button Held(Event Player, Interact) == True;
	}

	actions
	{
		If(Event Player.ShowShips);
			Event Player.ShowShips = False;
		Else;
			Event Player.ShowShips = True;
		End;
	}
}

rule("Activate game")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Is Game In Progress == True;
		Number of Players(All Teams) > 1;
	}

	actions
	{
		Big Message(All Players(All Teams), Custom String("Starting game in 5 seconds!"));
		Wait(5, Ignore Condition);
		Global.GamePhase = 1;
		Big Message(All Players(All Teams), Custom String("Place your ships!"));
		Teleport(All Players(All Teams), Vector(0, 10, 0));
		"Set everyone invisible so you can't see where ships are placed."
		Set Invisible(All Players(All Teams), All);
		Start Forcing Player To Be Hero(All Players(All Teams), Hero(Zenyatta));
		Wait(0.250, Ignore Condition);
		Small Message(All Players(All Teams), Custom String("Setting hero to Zenyatta to disable footsteps."));
	}
}

rule("Track hero player selected")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Game In Progress == True;
		Has Spawned(Event Player) == True;
	}

	actions
	{
		Event Player.PlayerHero = Hero Of(Event Player);
	}
}

rule("Check Valid Ship Placement")
{
	event
	{
		Subroutine;
		CheckValidShipPlacement;
	}

	actions
	{
		If(Event Player.LastShipPinPlaced == 0);
	}
}
